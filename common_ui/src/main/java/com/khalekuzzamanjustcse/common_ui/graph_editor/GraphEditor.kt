package com.khalekuzzamanjustcse.common_ui.graph_editor

import android.util.Log
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.unit.Dp
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update

class GraphEditor(
    private val nodeSize: Dp,
    private val nodeSizePx: Float,
    private val isDirected: Boolean = false,
) {
    private var autoGeneratedId = 0
    private val lastTwoClickedNode = arrayOfNulls<GraphEditorNode?>(2)
    private var clickCount = 0
    private var lastClickedNode: GraphEditorNode? = null

    //states
    private val _nodes = MutableStateFlow(setOf<GraphEditorNode>())
    val nodes = _nodes.asStateFlow()
    private var edgesRef = mutableSetOf<Edge>()
    private val _edges = MutableStateFlow(getDrawingEdges())
    val edges = _edges.asStateFlow()

    fun addNode(label: String) {
        Log.i("GraphEditor:AddNode:", "")
        val id = autoGeneratedId
        val node = GraphEditorNode(
            id = autoGeneratedId,
            label = "$id",
            size = nodeSize,
            onDragEnd = ::onNodeDragEnd,
            onClick = ::onNodeClick
        )
        _nodes.value = nodes.value + node
        autoGeneratedId++

    }

    fun removeNode() {

    }

    fun addEdge() {
        Log.i("GraphEditor:DragEnd:", "addEdge")
        val u = lastTwoClickedNode[0]
        val v = lastTwoClickedNode[1]
        if (u != null && v != null) {
            val edge = Edge(u.id, v.id)
            edgesRef.add(edge)
            _edges.update { getDrawingEdges() }
        }
    }

    private fun getDrawingEdges(): List<DrawingEdge> {
        Log.i("GraphEditor:getDraw:", "")
        val drawEdges = mutableListOf<DrawingEdge>()
        edgesRef.forEach { (uId, vId) ->
            val u = nodes.value.find { it.id == uId }
            val v = nodes.value.find { it.id == vId }
            if (u != null && v != null) {
                drawEdges.add(
                    DrawingEdge(
                        start = u.position + Offset(nodeSizePx / 2, nodeSizePx / 2),
                        end = v.position + Offset(nodeSizePx / 2, nodeSizePx / 2),
                        isDirected = isDirected
                    )
                )
            }
        }
        return drawEdges
    }

    private fun onNodeDragEnd(dragged: GraphEditorNode) {

        Log.i("GraphEditor:DragEnd:", dragged.label)
        _nodes.update { set ->
            set.map { if (it.id == dragged.id) dragged else it }.toSet()
        }
        _edges.update { getDrawingEdges() }
    }

    private fun onNodeClick(node: GraphEditorNode) {
        Log.i("GraphEditor:Clicked:", node.label)
        lastTwoClickedNode[clickCount % 2] = node
        clickCount++
    }
}