package com.khalekuzzamanjustcse.common_ui.graph_editor

import android.util.Log
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.unit.Dp
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update

class GraphEditor(
    private val nodeSize: Dp,
    val nodeSizePx: Float,
    val isDirected: Boolean = false,
) {
    private var autoGeneratedId = 0
    private val lastTwoClickedNode = arrayOfNulls<GraphEditorNode?>(2)
    private var clickCount = 0

    //
    //


    private val _nodes = MutableStateFlow(setOf<GraphEditorNode>())
    val nodes = _nodes.asStateFlow()
    private val _edges = mutableSetOf<Edge>()
    val edges = MutableStateFlow(getDrawingEdges())


    fun addNode(label: String) {
        val id = autoGeneratedId
        val node = GraphEditorNode(
            id = autoGeneratedId,
            label = "$id",
            size = nodeSize,
            onDragEnd = ::onNodeDragEnd,
            onClick = ::onNodeClick
        )
        _nodes.value = nodes.value + node
        autoGeneratedId++

    }

    fun addEdge() {
        val u = lastTwoClickedNode[0]
        val v = lastTwoClickedNode[1]
        if (u != null && v != null) {
            val edge = Edge(u.id, v.id)
            _edges.add(edge)
            edges.update { getDrawingEdges() }
            Log.i("onNodeDragEnd:DrawingEdge", "${edges.value.map { "(${it.start} ,${it.end})" }}")
        }
    }

    private fun getDrawingEdges(): List<DrawingEdge> {
        val drawEdges = mutableListOf<DrawingEdge>()
        _edges.forEach { (uId, vId) ->
            val u = nodes.value.find { it.id == uId }
            val v = nodes.value.find { it.id == vId }
            if (u != null && v != null) {
                drawEdges.add(
                    DrawingEdge(
                        u.position + Offset(nodeSizePx / 2, nodeSizePx / 2),
                        v.position + Offset(nodeSizePx / 2, nodeSizePx / 2)
                    )
                )
            }
        }
        return drawEdges
    }


    private fun onNodeDragEnd(dragged: GraphEditorNode) {
        _nodes.update { set ->
            set.map { if (it.id == dragged.id) dragged else it }.toSet()
        }
        edges.update { getDrawingEdges() }
        Log.i("onNodeDragEnd:DrawingEdge", "${edges.value.map { "(${it.start} ,${it.end})" }}")
    }

    private fun onNodeClick(node: GraphEditorNode) {
        lastTwoClickedNode[clickCount % 2] = node
        clickCount++
    }


}