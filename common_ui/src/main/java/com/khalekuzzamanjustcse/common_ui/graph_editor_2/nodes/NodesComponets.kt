package com.khalekuzzamanjustcse.common_ui.graph_editor_2.nodes

import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update


interface TouchableNode {
    val id: Int
    val topLeft: Offset
    val text: String
    val paddingPx: Float
    val minNodeSizePx: Float
    val shapeColor: Color

    fun isTouched(touchPosition: Offset): Boolean
    fun moveBy(offset: Offset): TouchableNode
    fun moveIf(touchPosition: Offset, dragAmount: Offset): TouchableNode
}

data class EditorCanvasNode(
    override val id: Int,
    override val topLeft: Offset,
    override val text: String,
    override val paddingPx: Float,
    override val minNodeSizePx: Float,
    override val shapeColor: Color = Color.Red
) : TouchableNode {
    override fun isTouched(touchPosition: Offset): Boolean {
        val minX = topLeft.x
        val minY = topLeft.y
        val shapeSize = paddingPx + paddingPx + minNodeSizePx
        val maxX = minX + shapeSize
        val maxY = minY + shapeSize
        return touchPosition.x in minX..maxX && touchPosition.y in minY..maxY
    }

    override fun moveBy(offset: Offset): TouchableNode {
        return this.copy(topLeft = topLeft + offset)
    }

    override fun moveIf(touchPosition: Offset, dragAmount: Offset): TouchableNode {
        return if (isTouched(touchPosition))
            this.copy(topLeft = topLeft + dragAmount)
        else
            this
    }
}

interface CanvasNodeManager {
    val nodePaddingPx: Float
    val nodeMinNodeSizePx: Float
    val enabledRemove: StateFlow<Boolean>

    val nodes: StateFlow<Set<TouchableNode>>
    fun addNode(label: String)
    fun removeNode()
    fun onDragStart(offset: Offset)
    fun onDrag(dragAmount: Offset)
    fun onDragEnd()
    fun onCanvasTap(offset: Offset)
    fun flipEditMode()
}

data class CanvasNodeManagerImp(
    override val nodePaddingPx: Float,
    override val nodeMinNodeSizePx: Float,
) : CanvasNodeManager {
    private val _nodes: MutableStateFlow<Set<TouchableNode>> =
        MutableStateFlow(
            setOf(
                EditorCanvasNode(
                    id = 1,
                    paddingPx = nodePaddingPx,
                    minNodeSizePx = nodeMinNodeSizePx,
                    topLeft = Offset(100f, 100f),
                    text = "10"
                )
            )
        )
    private val _enableRemove = MutableStateFlow(false)
    override val enabledRemove = _enableRemove.asStateFlow()
    private var observeDrag: Boolean = true

    override val nodes = _nodes.asStateFlow()
    private var autoGeneratedId = 2
    private var lastTap = Offset(20f, 20f)
    private var draggingNode: TouchableNode? = null
    private var lastTappedNode: TouchableNode? = null

    override fun addNode(label: String) {
        val node = EditorCanvasNode(
            id = autoGeneratedId++,
            topLeft = lastTap,
            text = "${10 * autoGeneratedId}",
            paddingPx = nodePaddingPx,
            minNodeSizePx = nodeMinNodeSizePx
        )
        _nodes.value = _nodes.value + node
    }

    override fun removeNode() {
        lastTappedNode?.let {
            _nodes.update { nodes ->
                nodes.filter { it.id != lastTappedNode!!.id }.toSet()
            }
        }
    }

    override fun onDragStart(offset: Offset) {
        if (observeDrag) {
            draggingNode = nodes.value.find { it.isTouched(offset) }
        }

    }

    override fun onDrag(dragAmount: Offset) {
        if (observeDrag) {
            draggingNode?.let {
                _nodes.update { list ->
                    list.map { node ->
                        if (node.id == draggingNode!!.id) {
                            node.moveBy(dragAmount)
                        } else node
                    }.toSet()
                }
            }
        }

    }

    override fun onDragEnd() {
        draggingNode = null
    }

    override fun onCanvasTap(offset: Offset) {
        if (observeDrag) {
            lastTap = offset
            lastTappedNode = nodes.value.find { it.isTouched(offset) }
            _enableRemove.update { lastTappedNode != null }
        }

    }

    override fun flipEditMode() {
        observeDrag = !observeDrag
    }
}
