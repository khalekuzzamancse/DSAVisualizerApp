package com.khalekuzzamanjustcse.graph_visualization.ui_layer.graph_input

import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.unit.Dp
import com.khalekuzzamanjustcse.graph_visualization.command_pattern.AddEdgeCommand
import com.khalekuzzamanjustcse.graph_visualization.command_pattern.AddNodeCommand
import com.khalekuzzamanjustcse.graph_visualization.command_pattern.RemoveNodeCommand
import com.khalekuzzamanjustcse.graph_visualization.command_pattern.UndoManager
import com.khalekuzzamanjustcse.graph_visualization.data_layer.Graph
import com.khalekuzzamanjustcse.graph_visualization.data_layer.GraphNode
import com.khalekuzzamanjustcse.graph_visualization.ui_layer.graph_draw.EdgeComposableState
import com.khalekuzzamanjustcse.graph_visualization.ui_layer.graph_draw.NodeComposableState
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch

class GraphMakerState(
    private val size: Dp,
    private val sizePx: Float,
) {
    private val scope = CoroutineScope(Dispatchers.Default)
    private var autoGeneratedId = 0
    private val graph = Graph<String>()
    private val _nodes = MutableStateFlow(emptyList<NodeComposableState>())
    private val _edges = MutableStateFlow(emptyList<EdgeComposableState>())
    val nodes = _nodes.asStateFlow()
    val edges = _edges.asStateFlow()

    private val undoManager = UndoManager()
    val disableUndo: Boolean
        get() = undoManager.undoAvailable
    val disableRedo: Boolean
        get() = undoManager.redoAvailable

    fun undo() = undoManager.undo()
    fun redo() = undoManager.redo()


    fun addNode(data: String) {
        val node = GraphNode(
            data = data,
            offset = lastTappedLocation,
            id = autoGeneratedId++
        )
        val addNodeCommand = AddNodeCommand(node, graph)
        undoManager.execute(addNodeCommand)
    }

    //
    private val recentlyClickedNodes = Array(2) { 0 }
    private var clickCount = 0
    private var lastTappedLocation = Offset.Zero
    private var lastTappedNodeId = -1

    //event handlers
    fun onDrag(nodeIndex: Int, offset: Offset) = graph.onNodeDrag(nodeIndex, offset)


    fun onNodeClick(nodeId: Int) {
        recentlyClickedNodes[clickCount % 2] = nodeId
        clickCount++
        lastTappedNodeId = nodeId
    }

    fun removeNode() =
        undoManager.execute(RemoveNodeCommand(lastTappedNodeId, graph))

    fun onCanvasTapped(offset: Offset) {
        lastTappedLocation = offset
    }

    fun addEdge() =
        undoManager.execute(AddEdgeCommand(recentlyClickedNodes[0], recentlyClickedNodes[1], graph))

    init {
        scope.launch {
            graph.nodes.collect { list ->
                _nodes.update {
                    list.map {
                        NodeComposableState(
                            label = it.label, size = size,
                            sizePx = sizePx, id = it.id, offset = it.offset
                        )
                    }
                }
            }

        }
        scope.launch {
            graph.edges.collect { list ->
                _edges.update {
                    list.map { pair ->
                        EdgeComposableState(
                            startPoint = pair.first.offset + Offset(sizePx / 2, sizePx / 2),
                            endPoint = pair.second.offset + Offset(sizePx / 2, sizePx / 2)
                        )
                    }
                }
            }
        }
    }
}